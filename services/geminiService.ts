
import { GoogleGenAI, Modality } from "@google/genai";
import { StyleOptions } from '../types';

const fileToGenerativePart = async (file: File) => {
  const base64EncodedDataPromise = new Promise<string>((resolve) => {
    const reader = new FileReader();
    reader.onloadend = () => {
      if (typeof reader.result === 'string') {
        resolve(reader.result.split(',')[1]);
      } else {
        resolve('');
      }
    };
    reader.readAsDataURL(file);
  });
  return {
    inlineData: { data: await base64EncodedDataPromise, mimeType: file.type },
  };
};

const buildPrompt = (options: StyleOptions): string => {
  return `
Restyle this image into ${options.description}.

**Core Instructions:**
- Preserve the main subjectâ€™s proportions, facial identity, and natural lighting unless specified otherwise.
- Apply stylistic changes mainly to the entire image with a focus on texture, color palette, and mood.
- Make the overall output look cohesive, well-lit, and visually pleasing, keeping natural shadows and structure consistent with the original image.

**Settings:**
- **Restyle Intensity:** ${options.intensity} (this controls how much to change from the original).
- **Lighting Mood:** ${options.lighting}.
- **Color Tone:** ${options.color}.
- **Texture Style:** ${options.texture}.
${options.influence ? `- **Art Influence:** ${options.influence}.` : ''}

Ensure the final result is a high-quality, artistic interpretation based on these settings.
  `;
};

export const restyleImage = async (image: File, options: StyleOptions): Promise<string> => {
  if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable not set");
  }

  const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });
  const imagePart = await fileToGenerativePart(image);
  const textPart = { text: buildPrompt(options) };

  try {
    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash-image',
        contents: {
          parts: [imagePart, textPart],
        },
        config: {
          responseModalities: [Modality.IMAGE],
        },
    });

    for (const part of response.candidates?.[0]?.content?.parts || []) {
      if (part.inlineData) {
        const base64ImageBytes: string = part.inlineData.data;
        return `data:${part.inlineData.mimeType};base64,${base64ImageBytes}`;
      }
    }
    throw new Error("No image was generated by the API.");
  } catch (error) {
    console.error("Error calling Gemini API:", error);
    throw new Error("Failed to restyle image. Please check the console for details.");
  }
};
